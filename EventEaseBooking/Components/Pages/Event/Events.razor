@page "/Events"


@using System.Net.Http.Json
@using Radzen
@inject NavigationManager navMan
@inject IEventService eventService
@inject IBookingService bookingService
@inject IClientService clientService



<PageTitle>Events</PageTitle>
@if (showSpinnerModal)
{
    <SpinnerModal />
}
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" integrity="sha512-k6RqeWeci5ZR/Lv4MR0sA0FfDOM9Z38gH5dQ0I6MK9Y1D/cLtHww5iEjaMUToTdeh1kD92r8un18PjGTeRv8g==" crossorigin="anonymous" referrerpolicy="no-referrer" />
<style>
    .table-container {
    margin: 20px;
    padding: 20px;
    border-radius: 8px;
    background-color: #f9f9f9;
    }

    table {
    overflow-x: auto; /* Enables horizontal scrolling */
    width: 100%;
    border-collapse: collapse;
    margin: 20px 0;
    }

    th, td {
    padding: 12px;
    text-align: left;
    border-bottom: 1px solid #ddd;
    }

    th {
    background-color: #4CAF50;
    color: white;
    }

    h2 {
    text-align: center;
    }

    .form-container {
    display: flex;
    flex-direction: column;
    gap: 15px; /* Adds space between form fields */
    margin: 30px auto;
    max-width: 500px; /* Controls the maximum width */
    padding: 20px;
    border: 1px solid #ddd;
    border-radius: 8px;
    background-color: #fff;
    }

    button {
    background-color: #008CBA;
    color: white;
    padding: 8px 16px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    display: inline-block; /* Allows for margin */
    margin-top: 10px;
    }

    button:hover {
    background-color: #005f7f;
    }

    .input-container {
    margin: 20px 0;
    display: flex;
    flex-direction: column;
    width: 300px;
    }

    /* Style the label */
    .input-container label {
    font-size: 16px;
    margin-bottom: 8px;
    color: #333;
    font-weight: bold;
    transition: all 0.3s ease;
    }

    /* Style the input field */
    .input-container input {
    padding: 10px;
    font-size: 16px;
    border: 2px solid #ccc;
    border-radius: 8px;
    outline: none;
    transition: border-color 0.3s ease, box-shadow 0.3s ease;
    }

    /* Add focus styles */
    .input-container input:focus {
    border-color: #4CAF50; /* Green color for focus */
    box-shadow: 0 0 8px rgba(76, 175, 80, 0.3); /* Subtle shadow effect */
    }

    /* Placeholder text style */
    .input-container input::placeholder {
    color: #888;
    }

    /* Add hover effect for better UX */
    .input-container input:hover {
    border-color: #888;
    }
</style>



@if (!showSpinnerModal)
{
    <div class="row">
        <h1> Events Management</h1>
        <br />


    </div>


    <RadzenStack>

        <RadzenCard Variant="Radzen.Variant.Outlined">

            <RadzenStack Orientation="Radzen.Orientation.Horizontal" AlignItems="Radzen.AlignItems.Center" Gap="1.5rem;" Wrap="FlexWrap.Wrap">
                <RadzenStack Orientation="Radzen.Orientation.Horizontal" AlignItems="Radzen.AlignItems.Center" Gap="0.5rem;">
                    <RadzenLabel Text="Logical filter operator:" Component="operator" />
                    <RadzenDropDown @bind-Value="@logicalFilterOperator" TextProperty="Text" ValueProperty="Value" Name="operator" Change=@(args => grid.Reload())
                    Data="@(Enum.GetValues(typeof(LogicalFilterOperator)).Cast<LogicalFilterOperator>().Select(t => new { Text = $"{t}", Value = t }))" />
                </RadzenStack>
                <RadzenStack Orientation="Radzen.Orientation.Horizontal" AlignItems="Radzen.AlignItems.Center" Gap="0.5rem;">
                    <RadzenLabel Text="Filter case sensitivity:" Component="caseSensitivity" />
                    <RadzenDropDown @bind-Value="@filterCaseSensitivity" TextProperty="Text" ValueProperty="Value" Name="caseSensitivity" Change=@(args => grid.Reload())
                    Data="@(Enum.GetValues(typeof(FilterCaseSensitivity)).Cast<FilterCaseSensitivity>().Select(t => new { Text = $"{t}", Value = t }))" />
                </RadzenStack>
            </RadzenStack>


        </RadzenCard>


        <RadzenDataGrid @ref=grid AllowFiltering="true" AllowColumnResize="true"
        FilterMode="Radzen.FilterMode.Simple" PageSize="5" AllowPaging="true" AllowSorting="true" Data="@events" ColumnWidth="300px" FilterPopupRenderMode="Radzen.PopupRenderMode.OnDemand"
        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" LogicalFilterOperator="LogicalFilterOperator.And">
            <Columns>
                <RadzenDataGridColumn Property="@nameof(Event.EventId)" Filterable="false" Title="ID" Frozen="true" Width="80px" TextAlign="Radzen.TextAlign.Center" />
                @*               <RadzenDataGridColumn Title="Photo" Sortable="false" Filterable="false" Width="200px">
                <Template Context="data">
                    <RadzenImage Path="@data.Photo" class="rz-gravatar" AlternateText="@(data.FirstName + " " + data.LastName)" />
                </Template>
            </RadzenDataGridColumn>  
 *@            <RadzenDataGridColumn Property="@nameof(Event.EventDate)" Filterable="true" Title="Event Date" FormatString="{0:d}" />
                <RadzenDataGridColumn Property="@nameof(Event.EventName)" Filterable="true" Title="Event Name" />
                <RadzenDataGridColumn Property="@nameof(Event.EventDescription)" Filterable="true" Title="Description">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Property="@nameof(Event.VenueName)" Filterable="true" Title="Venue">

                </RadzenDataGridColumn>
                @*           <RadzenDataGridColumn Property="@nameof(Event.ClientId)" Filterable="true" Title="Client">
                    <Template Context="data">
                        @GetClientName(data.ClientId)
                    </Template>
                </RadzenDataGridColumn> *@
                <RadzenDataGridColumn Property="@nameof(Event.Status)" Filterable="true" Title="Status" />
                <RadzenDataGridColumn Title="Edit" Frozen="true" Sortable="false" Filterable="false" Width="80px" TextAlign="TextAlign.Center">
                    <Template Context="data">
                        <RadzenButton Click="()=>UpdateEventOnClick(data)" class="btn btn-secondary " Text="Edit" />
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Title="Delete" Frozen="true" Sortable="false" Filterable="false" Width="80px" TextAlign="TextAlign.Center">
                    @*          <Template Context="data">
                        <RadzenButton Click="()=>DeleteButtonClick(data)" Style="color:none" Text="Delete"><i class="fas fa-trash-alt" style="color:red"></i></RadzenButton>
                    </Template> *@

                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    </RadzenStack>
}

<br/>

@* <div class="table-container">
    <table>
        <tr>
            <th>Event Id</th>
            <th>Event Name</th>
            <th>Client Name</th>
            <th>Date and Time</th>
            <th>Description</th>
            <th>Venue Name</th>
            <th>Type</th>
            <th>Action</th>
        </tr>
        @foreach (var ev in events)
        {
            <tr>
                <td>@ev.EventId</td>
                <td>@ev.EventName</td>
                <td>@ev.Clients</td>
                <td>@ev.EventDate</td>
                <td>@ev.EventDescription</td>
                <td>@ev.VenueId</td>

                <td>@ev.EventTypeId</td>
                <td><button @onclick="()=>UpdateEventOnClick(ev)">Update</button></td>
                <td>
                    <button class="delete-icon">
                        <i class="fas fa-trash-alt"></i>
                    </button>
                </td>
            </tr>
        }
        <tr>
            <td>1</td>
            <td>Spring Concert</td>
            <td>Divine</td>
            <td>04/10/2025 7:00 PM</td>
            <td>A musical evening featuring local artists.</td>
            <td>City Park</td>
            <td></td>
            <td><button>Update</button></td>
            <td>
                <button class="delete-icon">
                    <i class="fas fa-trash-alt"></i>
                </button>
            </td>
        </tr>
        <tr>
            <td>2</td>
            <td>Art Exhibit</td>
            <td>Keith</td>
            <td>05/20/2025 6:00 PM</td>
            <td>An exhibition showcasing new artists.</td>
            <td>Art Gallery</td>
            <td></td>
            <td><button>Update</button></td>
            <td>
                <button class="delete-icon">
                    <i class="fas fa-trash-alt"></i>
                </button>
            </td>
        </tr>
        <tr>
            <td>3</td>
            <td>Stand Up Comedy</td>
            <td>Loyiso Gola</td>
            <td>05/20/2025 6:00 PM</td>
            <td>Unlearning and Relearning.</td>
            <td>Laugh Out Loud</td>
            <td></td>
            <td><button>Update</button></td>
            <td>
                <button class="delete-icon">
                    <i class="fas fa-trash-alt"></i>
                </button>
            </td>
        </tr>
        @*         <tr>

            <td>4</td>
            <td>Mining Indaba Conference</td>
            <td>Amour</td>
            <td>06/15/2025 9:00 AM</td>
            <td>Join industry leaders and innovators.</td>
            <td>Convention Center</td>
            <td></td>
            <td><button>Update</button></td>
            <td>
                <button class="delete-icon">
                    <i class="fas fa-trash-alt"></i>
                </button>
            </td>
        </tr> *



    </table>
</div>
 *@
<h2>Add New Event</h2>

<div class="form-container">
    <form action="/submit" method="post">
        <div class="input-container">
            <label for="name">Event Name:</label>
            <input type="text" id="name" name="event_name" required>
        </div>
        <div class="input-container">
            <label for="date">Date:</label>
            <input type="date" id="date" name="date" required>
        </div>
        <div class="input-container">
            <label for="description">Description:</label>
            <textarea id="description" name="event_description" required></textarea>
        </div>
        <div class="input-container">
            <label for="venue">Venue:</label>
            <textarea id="venue" name="event_venue" required></textarea>
        </div>
        <div class="input-container">
            <label for="type">Type:</label>
            <input class="b-1" type="text" id="type" name="event_type" required>
        </div>
        <button type="submit">Add Event</button>
    </form>
</div>
<footer id="footer" class="row footer bottom-0" style="bottom:auto">
    <p>&copy; 2025 Eventease Booking App - All Rights Reserved</p>
</footer>

@code {

    bool showSpinnerModal = false;

    private bool _hidePosition;
    private bool _loading;
    private List<Event> events = new List<Event>();
    RadzenDataGrid<Event> grid;
    LogicalFilterOperator logicalFilterOperator = LogicalFilterOperator.And;
    FilterCaseSensitivity filterCaseSensitivity = FilterCaseSensitivity.CaseInsensitive;
    private List<Venue> venues = new List<Venue>();
    private List<Client> clients = new List<Client>();

    protected override async Task OnInitializedAsync()
    {
        showSpinnerModal = true;
        try
        {
        // Elements = await httpClient.GetFromJsonAsync<List<Element>>("webapi/periodictable");

        await GetEvents();
        venues = await bookingService.GetVenues();
        clients = await clientService.GetClients();
        }
        catch (Exception)
        {
            
            throw;
        }
        showSpinnerModal = false;


    }


    private async Task GetEvents()
    {
        events = await eventService.GetEvents();
    }

    private string GetVenueName(int venueId)
    {
        // Find venue in the preloaded list
        var venue = venues.FirstOrDefault(v => v.VenueId == venueId);
        return venue?.VenueName ?? "Unknown Venue";
    }

    private string GetEventName(int eventId)
    {
        // Find venue in the preloaded list
        var eventt = events.FirstOrDefault(v => v.EventId == eventId);
        return eventt?.EventName ?? "Unknown Event";
    }

    private string GetClientName(int clientId)
    {
        // Find client in the preloaded list
        var client = clients.FirstOrDefault(c => c.ClientId == clientId);
        return client?.ClientName ?? "Unknown Client";
    }

    private async Task UpdateEventOnClick(Event eventModel)
    {
        try
        {
            navMan.NavigateTo($"/EditEvent/{eventModel.EventId}");

        }
        catch (Exception ex)
        {
            // NotificationService.Notify(new NotificationMessage
            //     {
            //         Severity = NotificationSeverity.Error,
            //         Summary = $"Error",
            //         Detail = $"Unable to update Booking"
            //     });
        }
    }
}
<i class="fas fa-trash" />
<br />


<br />

