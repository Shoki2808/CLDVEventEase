@page "/Bookings"
@using EventEaseBooking.Components.Components
@using Radzen
@using Radzen.Blazor


@inject IBookingService bookingService
@inject IClientService clientService
@inject IEventService eventService

<PageTitle>Bookings</PageTitle>


@if (showSpinnerModal)
{
            <SpinnerModal />
}

@if (showConfmodal)
{
    showSpinnerModal = false;
            <ConfirmationDialog OnClose="OnConfirmationChange" Confirmed="OnConfirmationChange" />
}





@if (!showSpinnerModal)
{
            <div class="row">
                <h1> Bookings</h1>
                <br />


            </div>

            <center>
                <div class="d-grid gap-2 col-3">
                    <button class="btn btn-primary" @onclick="()=>NavToAddBooking()" style="color:#c6605d; background-color:lightpink; padding:10px; justify-content: center; align-items: center; gap: 8px; font-size: 20px; border-radius: 15px; border: none;">
                        Make booking
                    </button>
                </div>
            </center>

            <br/>

            <RadzenStack>

        @*     <RadzenCard Variant="Radzen.Variant.Outlined">

                <RadzenStack Orientation="Radzen.Orientation.Horizontal" AlignItems="Radzen.AlignItems.Center" Gap="1.5rem;" Wrap="FlexWrap.Wrap">
                    <RadzenStack Orientation="Radzen.Orientation.Horizontal" AlignItems="Radzen.AlignItems.Center" Gap="0.5rem;">
                        <RadzenLabel Text="Logical filter operator:" Component="operator" />
                        <RadzenDropDown @bind-Value="@logicalFilterOperator" TextProperty="Text" ValueProperty="Value" Name="operator" Change=@(args => grid.Reload())
                                        Data="@(Enum.GetValues(typeof(LogicalFilterOperator)).Cast<LogicalFilterOperator>().Select(t => new { Text = $"{t}", Value = t }))" />
                    </RadzenStack>
                    <RadzenStack Orientation="Radzen.Orientation.Horizontal" AlignItems="Radzen.AlignItems.Center" Gap="0.5rem;">
                        <RadzenLabel Text="Filter case sensitivity:" Component="caseSensitivity" />
                        <RadzenDropDown @bind-Value="@filterCaseSensitivity" TextProperty="Text" ValueProperty="Value" Name="caseSensitivity" Change=@(args => grid.Reload())
                                        Data="@(Enum.GetValues(typeof(FilterCaseSensitivity)).Cast<FilterCaseSensitivity>().Select(t => new { Text = $"{t}", Value = t }))" />
                    </RadzenStack>
                </RadzenStack>

            </RadzenCard> *@
                              <RadzenStack Orientation="Orientation.Horizontal">

                    </RadzenStack>
                        <RadzenTextBox Placeholder="Search ..." style="display: block; width: 100%" @oninput="@Search" aria-label="Search by all string columns" />

        @*                       <div class="row mb-3">
        <div class="col-md-12">
            <form method="get">
                <div class="form-group row">
                    <div class="col-md-3">
                        <label>From Date</label>
                        <RadzenDatePicker @bind-Value="@Model.StartDate" DateFormat="yyyy-MM-dd" />
                    </div>
                    <div class="col-md-3">
                        <label>To Date</label>
                        <RadzenDatePicker @bind-Value="@Model.EndDate" DateFormat="yyyy-MM-dd" />
                    </div>
                    <div class="col-md-2 align-self-end">
                        <RadzenButton ButtonType="ButtonType.Submit" Text="Filter" Icon="filter_list" />
                        <RadzenButton ButtonType="ButtonType.Button" Text="Clear" Click="@(() => { Model.StartDate = null; Model.EndDate = null; })" />
                    </div>
                </div>
            </form>
        </div>
    </div> *@

                <RadzenDataGrid @ref=grid AllowFiltering="true" AllowColumnResize="true"
                                FilterMode="Radzen.FilterMode.Advanced" PageSize="5" AllowPaging="true" AllowSorting="true" Data="@bookings" ColumnWidth="200px" FilterPopupRenderMode="Radzen.PopupRenderMode.OnDemand"
                                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" LogicalFilterOperator="LogicalFilterOperator.And">
                    <Columns>
                        <RadzenDataGridColumn Property="@nameof(Booking.BookingId)" Filterable="false" Title="ID" Frozen="true" Width="80px" TextAlign="Radzen.TextAlign.Center" />
                @*               <RadzenDataGridColumn Title="Photo" Sortable="false" Filterable="false" Width="200px">
                <Template Context="data">
                    <RadzenImage Path="@data.Photo" class="rz-gravatar" AlternateText="@(data.FirstName + " " + data.LastName)" />
                </Template>
            </RadzenDataGridColumn>  
 *@            <RadzenDataGridColumn Property="@nameof(Booking.BookingDate)" Filterable="true" Title="BookingDate" FormatString="{0:d}" />
                        <RadzenDataGridColumn Property="@nameof(Booking.BookingTime)" Filterable="false" Title="BookingTime" Width="150px" FormatString="{0:t}" />
                            <RadzenDataGridColumn Property="@nameof(Booking.StartTime)" Filterable="false" Title="Event Start Time" Width="150px" FormatString="{0:t}" />
                            <RadzenDataGridColumn Property="@nameof(Booking.EndTime)" Filterable="false" Title="Event End Time" Width="150px" FormatString="{0:t}" />


                @*         <RadzenDataGridColumn Property="@nameof(Booking.EventId)"  Filterable="true" Title="Event">
                <Template Context="data">
                    @GetEventName(data.EventId)
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Property="@nameof(Booking.VenueId)" Filterable="true" Title="Venue" >
                <Template Context="data">
                    @GetVenueName(data.VenueId)
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Property="@nameof(Booking.ClientId)" Filterable="true" Title="Client" >
                <Template Context="data">
                    @GetClientName(data.ClientId)
                </Template>
            </RadzenDataGridColumn> *@

                        <RadzenDataGridColumn Property="@nameof(Booking.EventName)" Filterable="true" Title="Event">

                        </RadzenDataGridColumn>

                        <RadzenDataGridColumn Property="@nameof(Booking.EventTypeName)" Filterable="true" Title="Event Type">

                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn Property="@nameof(Booking.VenueName)" Filterable="true" Title="Venue">
                       </RadzenDataGridColumn>
                        <RadzenDataGridColumn Property="@nameof(Booking.ClientName)" Filterable="true" Title="Client">

                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn Property="@nameof(Booking.AvailabilityStatus)" Filterable="true" Title="Status" />
                        <RadzenDataGridColumn Title="Edit" Frozen="true" Sortable="false" Filterable="false" Width="80px" TextAlign="TextAlign.Center">
                            <Template Context="data">
                                <RadzenButton Click="()=>EditButtonClick(data)" class="btn btn-secondary " Text="Edit" />
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn Title="Delete" Frozen="true" Sortable="false" Filterable="false" Width="80px" TextAlign="TextAlign.Center">
                            <Template Context="data">
                                <RadzenButton Click="()=>DeleteButtonClick(data)" Style="color:none" Text="Delete"><i class="fas fa-trash-alt" style="color:red"></i></RadzenButton>
                            </Template>

                        </RadzenDataGridColumn>
                    </Columns>
                </RadzenDataGrid>
            </RadzenStack>
}




@code {

    bool showSpinnerModal = false;

    // [Inject]
    // private NotificationService NotificationService { get; set; }

    // private Booking newBooking = new() { BookingDate = DateTime.Today, NumberOfTickets = 1 };



    List<BookingViewModel> filteredList = new List<BookingViewModel>();
    public EventCallback<string> onSearchChange { get; set; } = new EventCallback<string>();
    bool showError = false;
    private string Message = string.Empty;

    private List<Venue> venues = new List<Venue>();
    private List<Client> clients = new List<Client>();
    private List<Event> events = new List<Event>();
    RadzenDataGrid<Booking> grid;
    LogicalFilterOperator logicalFilterOperator = LogicalFilterOperator.And;
    FilterCaseSensitivity filterCaseSensitivity = FilterCaseSensitivity.CaseInsensitive;

    // public GlobalParam? globalParameters { get; set; } = new();
    private List<Booking> bookings = new List<Booking>();
    private Venue v = new Venue();
    private Client c = new Client();
    private Event e = new Event();
    private Booking bookingModel = new();
    string? venue;

    private int selectedRowNumber = -1;
    private List<string> clickedEvents = new();
    private ConfirmationDialog confirmationDialog;
    bool showConfmodal = false;
    bool success = false;

    protected string search = "";

    protected async Task Search(ChangeEventArgs args)
    {
        search = $"{args.Value}";

        // await grid.GoToPage(0);

        // bookings = await EventEaseDbService.GetBookings(new Query { Expand = "Event,Client" });
    }

    protected override async Task OnInitializedAsync()
    {
        NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Error",
                Detail = "errorMessage",
                Duration = 20000
            });
        // employees = dbContext.Employees;
        showSpinnerModal = true;
        try
        {
            await GetVenues();
            await Getbookings();
            // await GetClients();
            await GetEvents();


        }
        catch (Exception e)
        {
            throw new Exception($"Request Unsuccessful. {e}");
            showSpinnerModal = false;

        }
        await base.OnInitializedAsync();
        showSpinnerModal = false;
    }



    private void HandleValidSubmit()
    {
        //Logger.LogInformation("HandleValidSubmit called");

        // Process the valid form
    }

    public void NavToAddBooking()
    {
        NavigationManager.NavigateTo("/AddBooking");
    }

    private async Task GetVenues()
    {
        try
        {
            venues = await bookingService.GetVenues();
        }
        catch (Exception)
        {

            throw;
        }

    }

    private async Task GetClients()
    {
        try
        {
            clients = await clientService.GetClients();
        }
        catch (Exception)
        {

            throw;
        }

    }


    private async Task GetEvents()
    {
        try
        {
            events = await eventService.GetEvents();
        }
        catch (Exception)
        {

            throw;
        }

    }
    private async Task Getbookings()
    {
        try
        {
            bookings = await bookingService.GetBookings();
            bookings = bookings.OrderByDescending(x => x.BookingDate).ToList();
        }
        catch (Exception)
        {

            throw;
        }
    }


    // private void RowClickEvent(TableRowClickEventArgs<Booking> tableRowClickEventArgs)
    // {
    //     clickedEvents.Add("Row has been clicked");
    // }

    // private string SelectedRowClassFunc(Booking booking, int rowNumber)
    // {
    //     if (selectedRowNumber == rowNumber)
    //     {
    //         selectedRowNumber = -1;
    //         clickedEvents.Add("Selected Row: None");
    //         return string.Empty;
    //     }
    //     else if (mudTable.SelectedItem != null && mudTable.SelectedItem.Equals(booking))
    //     {
    //         selectedRowNumber = rowNumber;
    //         clickedEvents.Add($"Selected Row: {rowNumber}");
    //         return "selected";
    //     }
    //     else
    //     {
    //         return string.Empty;
    //     }
    // }

    private void DeleteButtonClick(Booking booking)
    {
        // Show the dialog
        // await confirmationDialog.Show();
        bookingModel = booking;
        showConfmodal = true;

        // The rest of the logic will continue in OnConfirmationChange
    }


    private async Task OnConfirmationChange(bool confirmed)
    {
        if (confirmed)
        {
            // User clicked Yes - perform the action
            await DeleteBooking(bookingModel);
        }
        else
        {
            // User clicked No - do nothing or handle cancellation
        }
    }
    private async Task DeleteBooking(Booking booking)
    {
        showConfmodal = false;
        showSpinnerModal = true;
        try
        {
            var deleteResult = await bookingService.DeleteBooking(booking.BookingId);

            if (deleteResult)
            {
                // await DialogService.Confirm("Record Deleted");
                ShowNotification(new NotificationMessage { Style = "position: absolute; inset-inline-start: -1000px;", Severity = NotificationSeverity.Success, Summary = "Item Deleted", Detail = "Successfully deleted booking", Duration = 4000 });
                NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
            }
            else
            {
                ShowNotification(new NotificationMessage { Style = "position: absolute; inset-inline-start: -1000px;", Severity = NotificationSeverity.Error, Summary = "Item Couldn't Be Deleted", Detail = "", Duration = 4000 });

            }

        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = $"Error",
                    Detail = $"Unable to delete Booking"
                });
        }
    }


    private void EditButtonClick(Booking booking)
    {
        try
        {
            globalParameters.bookingModel = booking;
            NavigationManager.NavigateTo($"/EditBooking/{booking.BookingId}");


        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = $"Error",
                    Detail = $"Unable to update Booking"
                });
        }
    }


    private string GetVenueName(int venueId)
    {
        // Find venue in the preloaded list
        var venue = venues.FirstOrDefault(v => v.VenueId == venueId);
        return venue?.VenueName ?? "Unknown Venue";
    }

    private string GetEventName(int eventId)
    {
        // Find venue in the preloaded list
        var eventt = events.FirstOrDefault(v => v.EventId == eventId);
        return eventt?.EventName ?? "Unknown Event";
    }

    private string GetClientName(int clientId)
    {
        // Find client in the preloaded list
        var client = clients.FirstOrDefault(c => c.ClientId == clientId);
        return client?.ClientName ?? "Unknown Client";
    }



    void ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);

    }


    void ShowNotificationWithCustomContent()
    {
        NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Warning,
                Duration = 40000,
                SummaryContent = ns =>@<RadzenText TextStyle="TextStyle.H6">Custom summary: <br /> @DateTime.Now</RadzenText>,
                DetailContent = ns => @<RadzenButton Text="Clear" Click="@(args => ns.Messages.Clear())" />
        });
    }
}
