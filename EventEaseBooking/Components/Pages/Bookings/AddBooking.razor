@page "/AddBooking"

@inject NavigationManager navMan
@inject IBookingService bookingService
@inject IEventService eventService
@inject IClientService clientService


<PageTitle>Bookings</PageTitle>



<div class="row" style="padding-left: 20%; padding-right:20%; padding-bottom:10%; ">

    <div>
        <h1 style="padding-top:10px; padding-bottom:10px">Add New Booking</h1>
    </div>

    <RadzenStack class="rz-p-0 rz-p-md-12">

        <RadzenTemplateForm TItem="BookingViewModel" Data=@booking Submit=@SubmitBooking InvalidSubmit=@OnInvalidSubmit>
            <RadzenFieldset >
                <RadzenStack Gap="2rem" class="rz-p-4 rz-p-md-12">
                    <div class="card mt-2 mb-4" style="box-shadow: 5px 5px 5px 5px #e3dede;">
                        <div class="row justify-content-center mb-3" style=" padding-left: 10%; padding-right:10%; ">
                            <div class="row g-3">
                                <h3 class="p-2 mt-2 mb-2">Event Information</h3>

                                <RadzenRow AlignItems="AlignItems.Center" RowGap="0.25rem">
                                    <RadzenColumn Size="12" SizeMD="4" class="rz-text-align-start rz-text-align-md-end">
                                        <RadzenLabel Text="Event Date" Component="booking.EventModel.EventDate" />
                                    </RadzenColumn>
                                    <RadzenColumn Size="12" SizeMD="8">
                                        <RadzenDatePicker style="display: block" Name="booking.EventModel.EventDate" @bind-Value=booking.EventModel.EventDate ShowCalendarWeek class="rz-w-100" />
                                        <RadzenRequiredValidator Component="booking.EventModel.EventDate" Popup=@popup Style="position: absolute" />
                                    </RadzenColumn>
                                </RadzenRow>

                                <RadzenRow AlignItems="AlignItems.Center" RowGap="0.25rem">
                                    <RadzenColumn Size="12" SizeMD="4" class="rz-text-align-start rz-text-align-md-end">
                                        <RadzenLabel Text="Event Name" Component="booking.EventModel.EventName" />
                                    </RadzenColumn>
                                    <RadzenColumn Size="12" SizeMD="8">
                                        <RadzenTextBox style="display: block" Name="booking.EventModel.EventName" @bind-Value=booking.EventModel.EventName />
                                        <RadzenRequiredValidator Component="booking.EventModel.EventName" Popup=@popup Style="position: absolute" />
                                    </RadzenColumn>
                                </RadzenRow>

                                <RadzenRow AlignItems="AlignItems.Center" RowGap="0.25rem">
                                    <RadzenColumn Size="12" SizeMD="4" class="rz-text-align-start rz-text-align-md-end">
                                        <RadzenLabel Text="Event Description" Component="booking.EventModel.EventDescription" />
                                    </RadzenColumn>
                                    <RadzenColumn Size="12" SizeMD="8">
                                        <RadzenTextBox style="display: block" Name="booking.EventModel.EventDescription" @bind-Value=booking.EventModel.EventDescription />
                                        <RadzenRequiredValidator Component="booking.EventModel.EventDescription" Popup=@popup Style="position: absolute" />
                                    </RadzenColumn>
                                </RadzenRow>

                                <RadzenRow AlignItems="AlignItems.Center" RowGap="0.25rem">
                                    <RadzenColumn Size="12" SizeMD="4" class="rz-text-align-start rz-text-align-md-end">
                                        <RadzenLabel Text="Select Event Type" Component="booking.EventModel.EventTypeId" />
                                    </RadzenColumn>
                                    <RadzenColumn Size="12" SizeMD="8">
                                        <select type="etype" class="form-control" id="booking.EventModel.EventTypeId" @onchange="OnEventTypeChange">
                                            @foreach (var type in EventTypeList)
                                            {
                                                <option value="@type.EventTypeId">@type.EventTypeName</option>
                                            }

                                        </select>
                @*                         <RadzenDropDown TValue="int" Value=@booking.EventModel.EventTypeId Data=@EventTypeList TextProperty="@nameof(EventType.EventTypeName)" Style="width: 100%; max-width: 400px;" Name="booking.EventModel.EventTypeId" />
                                 
                                        <RadzenDataAnnotationValidator Component="booking.EventModel.EventTypeId" Popup=@popup Style="position: absolute" /> *@
                                    </RadzenColumn>
                                </RadzenRow>
                
                            </div>
                        </div>
                    </div>


                    <div class="card mt-2 mb-4" style="box-shadow: 5px 5px 5px 5px #e3dede;">
                        <div class="row justify-content-center mb-3" style=" padding-left: 10%; padding-right:10%; ">
                            <div class="row g-3">
                                <h3 class="p-2 mt-2 mb-2">Client Information</h3>
                                <RadzenRow AlignItems="AlignItems.Center" RowGap="0.25rem">
                                    <RadzenColumn Size="12" SizeMD="4" class="rz-text-align-start rz-text-align-md-end">
                                        <RadzenLabel Text="Client Name" Component="booking.Client.ClientName" />
                                    </RadzenColumn>
                                    <RadzenColumn Size="12" SizeMD="8">
                                        <RadzenTextBox style="display: block" Name="booking.Client.ClientName" @bind-Value=booking.Client.ClientName />
                                        <RadzenRequiredValidator Component="booking.Client.ClientName" Popup=@popup Style="position: absolute" />
                                    </RadzenColumn>
                                </RadzenRow>

                                <RadzenRow AlignItems="AlignItems.Center" RowGap="0.25rem">
                                    <RadzenColumn Size="12" SizeMD="4" class="rz-text-align-start rz-text-align-md-end">
                                        <RadzenLabel Text="Client Contact Details" Component="booking.ClientModel.ClientName" />
                                    </RadzenColumn>
                                    <RadzenColumn Size="12" SizeMD="8">
                                        <RadzenTextBox style="display: block" Name="booking.Client.ContactDetails" @bind-Value=booking.Client.ContactDetails />
                                        <RadzenRequiredValidator Component="booking.Client.ContactDetails" Popup=@popup Style="position: absolute" />
                                    </RadzenColumn>
                                </RadzenRow>

                                <RadzenRow AlignItems="AlignItems.Center" RowGap="0.25rem">
                                    <RadzenColumn Size="12" SizeMD="4" class="rz-text-align-start rz-text-align-md-end">
                                        <RadzenLabel Text="Client Contact Details" Component="booking.ClientModel.ClientName" />
                                    </RadzenColumn>
                                    <RadzenColumn Size="12" SizeMD="8">
                                        <RadzenTextBox style="display: block" Name="booking.Client.ClientEmail" @bind-Value=booking.Client.ClientEmail />
                                        <RadzenRequiredValidator Component="booking.Client.ClientEmail" Text="Email is required" Popup=@popup Style="position: absolute" />
                                        <RadzenEmailValidator Component="booking.Client.ClientEmail" Text="Provide a valid email address" Popup=@popup Style="position: absolute" />
                                       @*  <RadzenDataAnnotationValidator Component="booking.Client.ClientEmail" Popup=@popup Style="position: absolute" /> *@
                                    </RadzenColumn>
                                </RadzenRow>
                             
                            </div>
                        </div>
                    </div>



                    <div class="card mt-2 mb-4" style="box-shadow: 5px 5px 5px 5px #e3dede;">
                        <div class="row justify-content-center mb-3" style=" padding-left: 10%; padding-right:10%; ">
                            <div class="row g-3">

                                <h3 class="p-2 mt-2 mb-2">Venue Information</h3>

                                <RadzenRow AlignItems="AlignItems.Center" RowGap="0.25rem">
                                    <RadzenColumn Size="12" SizeMD="4" class="rz-text-align-start rz-text-align-md-end">
                                        <RadzenLabel Text="Select Venue" Component="booking.EventModel.EventDescription" />
                                    </RadzenColumn>
                                    <RadzenColumn Size="12" SizeMD="8">
                                        <select type="email" class="form-control" id="venue" @onchange="OnVenueChange">
                                            <option selected value="">Select Venue</option>

                                            @foreach (var ven in venueList)
                                            {
                                                <option value="@ven.VenueId">@ven.VenueName</option>
                                            }

                                        </select>
                              @*           <RadzenDropDown TValue="string" Value=@booking.VenueModel.VenueId Data=@venueList TextProperty="@nameof(Venue.VenueName)" Style="width: 100%; max-width: 400px;" Name="booking.VenueModel.VenueId" />

                                        <RadzenDataAnnotationValidator Component="booking.VenueModel.VenueId " Popup=@popup Style="position: absolute" /> *@
                                    </RadzenColumn>
                                </RadzenRow>
   
                            </div>
                        </div>
                    </div>

                    <RadzenRow AlignItems="AlignItems.Center" class="rz-mt-4">
                        <RadzenColumn Size="6" Offset="0" SizeMD="8" OffsetMD="4">
                            <button class="btn btn-primary " @onclick="()=> CancelBtnClick()" style="color:white; background-color:black; padding:10px; justify-content: center; align-items: center; gap: 8px; font-size: 20px; border-radius: 15px; border: none;">
                                Cancel
                            </button>
                            
                        </RadzenColumn>
                        <RadzenColumn Size="6" Offset="0" SizeMD="8" OffsetMD="4">
                           
                            <RadzenButton class="btn btn-primary" Style="display: inline-flex; padding:10px; justify-content: center; align-items: center; gap: 8px; font-size: 20px; border-radius: 15px; border: none; color:#c6605d; background-color:lightpink;" ButtonType="ButtonType.Submit" Text="Submit"></RadzenButton>
                        </RadzenColumn>
                    </RadzenRow>
                </RadzenStack>
            </RadzenFieldset>
        </RadzenTemplateForm>
    </RadzenStack>

   @*  <div class="card mt-2 mb-4" style="box-shadow: 5px 5px 5px 5px #e3dede;">
        <div class="row justify-content-center mb-3" style=" padding-left: 10%; padding-right:10%; ">
            <div class="row g-3">

                <h3 class="p-2 mt-2 mb-2">Event Information</h3>
                <div class="col-md-12">
                    <label for="inputEmail4" class="form-label">Event Date</label>
                    <input type="date" class="form-control" id="date" @bind="eventModel.EventDate" />
                </div>
                <div class="col-md-12">
                    <label for="inputEmail4" class="form-label">Event Name</label>
                    <input type="text" class="form-control" id="date" @bind="eventModel.EventName" />
                </div>
                <div class="col-md-12">
                    <label for="inputEmail4" class="form-label">Event Description</label>
                    <input type="text" class="form-control" id="date" @bind="eventModel.EventDescription" />
                </div>
                <div class="col-md-12">
                    <label for="inputEmail4" class="form-label">Event Type</label>
                    <select type="etype" class="form-control" id="venue" @onchange="OnEventTypeChange">
                        @foreach (var type in EventTypeList)
                        {
                            <option value="@type.EventTypeId">@type.EventTypeName</option>
                        }

                    </select>
                </div>
            </div>
        </div>
    </div>




    <div class="card mt-2 mb-4" style="box-shadow: 5px 5px 5px 5px #e3dede;">
        <div class="row justify-content-center mb-3" style=" padding-left: 10%; padding-right:10%; ">
            <div class="row g-3">

                <h3 class="p-2 mt-2 mb-2">Client Information</h3>
                <div class="col-md-12">
                    <label for="clientname" class="form-label">Client Name</label>
                    <input type="text" class="form-control" id="name" @bind="clientModel.ClientName" />
                </div>
                <div class="col-md-12">
                    <label for="clientcontact" class="form-label">Client Contact Details</label>
                    <input type="number" class="form-control" id="conbtact" @bind="clientModel.ContactDetails" />
                </div>
                <div class="col-md-12">
                    <label for="inputEmail4" class="form-label">Client Email Address</label>
                    <input type="email" class="form-control" id="inputEmail4" @bind="clientModel.ClientEmail" />

                </div>
            </div>
        </div>
    </div>

    <div class="card mt-2 mb-4" style="box-shadow: 5px 5px 5px 5px #e3dede;">
        <div class="row justify-content-center mb-3" style=" padding-left: 10%; padding-right:10%; ">
            <div class="row g-3">

                <h3 class="p-2 mt-2 mb-2">Venue Information</h3>
                <div class="col-md-12">
                    <label for="inputEmail4" class="form-label">Select Venue</label>
                    <select type="email" class="form-control" id="venue" @onchange="OnVenueChange" >
                        <option selected value="">Select Venue</option>

                        @foreach(var ven in venueList)
                        {
                            <option value="@ven.VenueId">@ven.VenueName</option>
                        }

                    </select>

                </div>
            </div>
        </div>
    </div>

    <center>


    </center>

    <div class="row col-12 mb-5 mt-3 ">
        <div class="col-6"></div>
        <div class="d-grid col-3 gap-2 mx-auto">
            <button class="btn btn-primary "@onclick="()=> CancelBtnClick()" style="color:white; background-color:black; padding:10px; justify-content: center; align-items: center; gap: 8px; font-size: 20px; border-radius: 15px; border: none;">
                Cancel
            </button>


        </div>
        <div class="d-grid col-3 gap-2 mx-auto ">

            <button class="btn btn-primary" @onclick="() => SubmitBooking()" style="display: inline-flex; padding:10px; justify-content: center; align-items: center; gap: 8px; font-size: 20px; border-radius: 15px; border: none; color:#c6605d; background-color:lightpink;">
                Submit booking
            </button>
        </div>
    </div>
 *@
</div>




@code {

    bool showSpinnerModal = false;
    private Booking bookingModel = new Booking();
    private BookingViewModel booking = new BookingViewModel();

    private Event eventModel = new Event();
    private Venue venueModel = new();
    private Client clientModel = new();
    private List<Venue> venueList = new List<Venue>();
    private List<EventType> EventTypeList = new List<EventType>();
    private int ETypeId;
    private EventType eventType = new();
    DateTime CurrentDate = DateTime.Now;
    private Event eventResult = new Event();
    private Client clientResult = new Client();
    private Booking bookingResult = new Booking();

    bool showSuccess = false;

    // class Model
    // {
    //     [Required]
    //     [StringLength(15, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long", MinimumLength = 4)]
    //     public string Username { get; set; }


    //     [Required]
    //     [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long", MinimumLength = 6)]
    //     [DataType(DataType.Password)]
    //     [Display(Name = "Password")]
    //     public string Password { get; set; }

    //     [DataType(DataType.Password)]
    //     [Display(Name = "Confirm password")]
    //     [Compare("Password", ErrorMessage = "The password and confirmation password do not match")]
    //     public string ConfirmPassword { get; set; }
    // }

    bool popup;

   

    protected override async Task OnInitializedAsync()
    {
        try
        {

            
            await GetVEventTypes();
await GetVenues();
            // bookingModel.BookingDate = DateOnly.FromDateTime(CurrentDate);
            booking.BookingModel.BookingTime = TimeOnly.FromDateTime(CurrentDate);
            booking.EventModel.EventDate = DateOnly.FromDateTime(CurrentDate);
        }
        catch (Exception)
        {

            throw;
        }
        await base.OnInitializedAsync();
    }


    private async Task OnEventTypeChange(ChangeEventArgs e)
    {
        try
        {
            if (e.Value != null)
            {
                //eventType = 
                ETypeId = Int32.Parse(e.Value.ToString());


            }
            // venueList = venueList.Where(x => x.EventTypeId.ToString().Equals(ETypeId));
        }
        catch (Exception)
        {

            throw;
        }
        await Task.CompletedTask;

    }

    private async Task OnVenueChange(ChangeEventArgs e)
    {
        try
        {
            if (e.Value != null)
            {
                int Venue = Int32.Parse(e.Value.ToString());
                booking.BookingModel.VenueId = Venue;
                booking.EventModel.VenueId = Venue;
            }
        }
        catch (Exception)
        {

            throw;
        }
        await Task.CompletedTask;
        //bookingModel.VenueId = Venue.;

    }

    private async Task GetVenues()
    {
        try
        {
            venueList = await bookingService.GetVenues();
        }
        catch (Exception e)
        {
            var ex = e.InnerException;
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = $"Error",
                    Detail = $"Unable to get Venues at this moment"
                });
        }

    }

    private async Task GetVEventTypes()
    {
        try
        {
            EventTypeList = await eventService.GetEventTypes();
        }
        catch (Exception e)
        {
            var ex = e.InnerException;
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = $"Error",
                    Detail = $"Unable to get Event Types at this moment"
                });
        }

    }

    private void CancelBtnClick()
    {
        NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Warning,
                Summary = $"Error",
                Detail = $"You have cancelled your Booking"
            });
        navMan.NavigateTo("/Bookings");
    }
    private async Task SubmitBooking()
    {
        showSpinnerModal = true;


        try
        {   
            // clientModel.Password = $"({clientModel.ClientName}2585485)";
            // clientModel.EventName = eventModel.EventName;
            // clientModel.EventId = 1;
            // clientModel.BookingId = 10;
            // clientModel.VenueId = 5;

            clientResult = await clientService.AddClient(booking.Client);

            booking.EventModel.EventTypeId = ETypeId;
            booking.EventModel.VenueId = bookingModel.VenueId;
            eventResult = await eventService.AddEvent(booking.EventModel);

            booking.BookingModel.ClientId = clientResult.ClientId;
            booking.BookingModel.EventId = eventResult.EventId;

            bookingResult = await bookingService.CreateBooking(booking.BookingModel);
            if(bookingResult != null)
            {
                showSuccess = true;
                NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Success,
                        Summary = $"Success",
                        Detail = $"Booking completed successfully"
                    });
                navMan.NavigateTo("/Bookings");
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = $"Error",
                    Detail = $"Unable to add Booking, {ex}"
                });
        }
        // return result.ToString();
        showSpinnerModal = false;
        NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Summary = $"Success",
                Detail = $"Booking completed successfully"
            });
        navMan.NavigateTo("/Bookings");
    }

    void OnInvalidSubmit(FormInvalidSubmitEventArgs args)
    {
        NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = $"Error",
                Detail = $"Unable to add Booking. {args}"
            });
    }
}
